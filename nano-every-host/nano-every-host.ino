#define SERIAL_TX_BUFFER_SIZE 16
#define SERIAL_RX_BUFFER_SIZE 16

#include <zip8.h>

#include <Wire.h>

#include "zip8ssd1306.h"

extern "C" void zip8Log(const char *text, size_t length) {
  Serial.write(text, length);
  Serial.write('\n');
}

bool ledOn = false;

unsigned char program[] = {
  0x69, 0x08, 0x6a, 0x0c, 0x8b, 0xd4, 0x4f, 0x01, 0x7a, 0x01, 0x8a, 0xc4,
  0x6e, 0x10, 0x8d, 0xe4, 0x4f, 0x01, 0x7c, 0x01, 0x6e, 0x20, 0x8e, 0xa2,
  0x3e, 0x00, 0x12, 0xa2, 0x6e, 0x0e, 0xee, 0x9e, 0x12, 0x26, 0x6d, 0x60,
  0x6c, 0xff, 0x6e, 0x7f, 0x8e, 0x72, 0x3e, 0x00, 0x12, 0x46, 0x60, 0x3f,
  0xc1, 0x0f, 0x6e, 0x0c, 0x8e, 0x15, 0x4f, 0x00, 0x12, 0x30, 0x71, 0x0a,
  0x8e, 0x8e, 0xa3, 0xb7, 0xfe, 0x1e, 0xf1, 0x55, 0x78, 0x01, 0x8e, 0x80,
  0x64, 0x00, 0xa3, 0xb7, 0xf4, 0x1e, 0xf1, 0x65, 0x23, 0x0c, 0x63, 0x03,
  0x83, 0x72, 0x33, 0x00, 0x12, 0x62, 0x63, 0x01, 0x80, 0x35, 0x4f, 0x00,
  0x12, 0x6c, 0xa3, 0xb7, 0xf4, 0x1e, 0xf1, 0x55, 0x74, 0x02, 0x12, 0x80,
  0x78, 0xff, 0x76, 0x01, 0xa3, 0x97, 0xff, 0x55, 0xa3, 0xb9, 0xf5, 0x65,
  0xa3, 0xb7, 0xf5, 0x55, 0xa3, 0x97, 0xff, 0x65, 0x7e, 0xff, 0x3e, 0x00,
  0x12, 0x4a, 0x23, 0x32, 0x4f, 0x01, 0x12, 0xa2, 0x6e, 0x31, 0x64, 0x01,
  0x23, 0x42, 0x6e, 0x01, 0xfe, 0x15, 0xfe, 0x07, 0x3e, 0x00, 0x12, 0x96,
  0x00, 0xe0, 0x77, 0x01, 0x12, 0x04, 0x00, 0xe0, 0x6e, 0x80, 0x8e, 0xa5,
  0x4f, 0x00, 0x6a, 0x00, 0x6e, 0x1f, 0x8e, 0xa5, 0x4f, 0x00, 0x6a, 0x1e,
  0x23, 0x32, 0x6e, 0x31, 0x64, 0x01, 0x23, 0x42, 0xa3, 0xb7, 0xf1, 0x65,
  0x6e, 0x10, 0x8e, 0x05, 0x3f, 0x00, 0x23, 0x0c, 0x60, 0x1e, 0xf0, 0x15,
  0xf0, 0x07, 0x30, 0x00, 0x12, 0xcc, 0x60, 0x16, 0x61, 0x05, 0xa3, 0x63,
  0xd0, 0x1b, 0x70, 0x08, 0xa3, 0x6e, 0xd0, 0x1b, 0x70, 0x08, 0xa3, 0x79,
  0xd0, 0x1b, 0xf0, 0x85, 0x8e, 0x00, 0x8e, 0x65, 0x4f, 0x00, 0x80, 0x60,
  0xf0, 0x75, 0x86, 0x00, 0x6e, 0x31, 0x64, 0x1a, 0x23, 0x42, 0x6e, 0x31,
  0x64, 0x15, 0xa3, 0x93, 0xde, 0x44, 0xf0, 0x0a, 0xa3, 0xa7, 0xff, 0x65,
  0x00, 0xe0, 0x12, 0x00, 0xa3, 0x88, 0x63, 0x00, 0xd0, 0x3b, 0x73, 0x0b,
  0xd0, 0x3b, 0x73, 0x0b, 0xd0, 0x3a, 0x71, 0x06, 0xd0, 0x14, 0x71, 0xf8,
  0xd0, 0x18, 0x71, 0xf8, 0xd0, 0x18, 0xa3, 0x84, 0xd0, 0x14, 0x71, 0x10,
  0xd0, 0x14, 0x71, 0xfa, 0x00, 0xee, 0x6e, 0x80, 0x8e, 0xc2, 0x4e, 0x80,
  0xa3, 0x5c, 0x4e, 0x00, 0xa3, 0x5f, 0xd9, 0xa4, 0x00, 0xee, 0xa3, 0x97,
  0xf6, 0x33, 0xf2, 0x65, 0xf0, 0x29, 0xde, 0x45, 0x7e, 0x05, 0xf1, 0x29,
  0xde, 0x45, 0x7e, 0x05, 0xf2, 0x29, 0xde, 0x45, 0x7e, 0x05, 0x00, 0xee,
  0x00, 0x30, 0xf0, 0xc0, 0xf0, 0x30, 0x00, 0xf3, 0x84, 0xb7, 0x94, 0xf4,
  0x00, 0xf4, 0x94, 0x94, 0x92, 0xf1, 0x22, 0xb6, 0xaa, 0xa2, 0xa2, 0x00,
  0x5e, 0x50, 0x58, 0x90, 0x1e, 0xf0, 0x80, 0xc0, 0x80, 0xf0, 0x00, 0xe0,
  0x90, 0xe0, 0x90, 0x90, 0xff, 0x81, 0x81, 0xff, 0x42, 0x42, 0x42, 0x42,
  0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x88, 0xe2, 0xa8, 0xaa
};
unsigned int program_len = 407;

#define OLED_DC     21
#define OLED_CS     6
#define OLED_RESET  20

Zip8SSD1306 display(SPI, OLED_DC, OLED_RESET, OLED_CS);

#define KEYBOARD_ADDRESS 0x48

uint8_t cpu[1395];

void panic(const char *why, int code) {
  Serial.print("failure: ");
  Serial.println(why);
  while (true) {
    digitalWrite(LED_BUILTIN, HIGH);
    delay(1000);
    digitalWrite(LED_BUILTIN, LOW);
    delay(1000);

    for (int i = 0; i < code; i++) {
      digitalWrite(LED_BUILTIN, HIGH);
      delay(250);
      digitalWrite(LED_BUILTIN, LOW);
      delay(250);
    }
    delay(750);
  }
}

// the setup function runs once when you press reset or power the board
void setup() {
  // initialize digital pin LED_BUILTIN as an output.
  pinMode(LED_BUILTIN, OUTPUT);
  Serial.begin(9600);
  Wire.begin();

  if (sizeof(cpu) != zip8CpuGetSize()) {
    panic("wrong cpu size", 5);
  }

  uint16_t err;
  if (zip8CpuInit(&err, cpu, program, program_len, 0, 0)) {
    Serial.println(zip8GetErrorName(err));
    panic("cpu init", 3);
  }

  if (!display.begin(SSD1306_SWITCHCAPVCC)) {
    panic("display alloc", 2);
  }
}

// the loop function runs over and over again forever
void loop() {
  unsigned long before = micros();

  digitalWrite(LED_BUILTIN, ledOn ? HIGH : LOW);
  ledOn = !ledOn;


  uint16_t err;
  for (int i = 0; i < 200; i++) {
    if (zip8CpuCycle(&err, cpu)) {
      Serial.println(zip8GetErrorName(err));
      panic("cpu cycle", 4);
    }
  }

  display.display(cpu);

  Wire.requestFrom(KEYBOARD_ADDRESS, 2);
  uint16_t keys = Wire.read();
  keys |= ((uint16_t)Wire.read()) << 8;
  zip8CpuSetKeys(cpu, keys);

  zip8CpuTimerTick(cpu);

  unsigned long after = micros();
  if ((after - before) < 16667) {
    delayMicroseconds(16667 - (after - before));
  }
  Serial.println(after - before);
}
